% mutant_fit
%%% looping through mutants and conditions to fit the same model

%% load Data folder
data_path = '/projects/LEIFER/Kevin/Data_learn/Mutants/data_analysis/Data_files';
sav_path = '/projects/LEIFER/Kevin/Data_learn/Mutants/data_analysis/';
fileList = dir(fullfile(data_path, '*.mat'));

data_n2 = {'/projects/LEIFER/Kevin/Data_learn/N2/data_analysis/Data_app_test2.mat',...
         '/projects/LEIFER/Kevin/Data_learn/N2/data_analysis/Data_ave_test2.mat',...
         '/projects/LEIFER/Kevin/Data_learn/N2/data_analysis/Data_nai_test2.mat'};
     
%% parameter settings
rep = 3;  % repetition per fold to make sure that it is the better fit
n_strains = 5;  % number of stains in the folder
L = length(fileList);  % K-fold cross-validation
n_params = 13-1+2;  % number of parameters in our model for now
mle_mut_params = zeros(L, n_params); % L x N
trainLL = zeros(L,1);

%% looping
for li = 1:numel(fileList)
    
    %%% load Data structure
    fileName = fileList(li).name;
    filePath = fullfile(data_path, fileName);
    load(filePath);
    
    %%% training, with small repetition
    x_temp = zeros(rep,n_params);
    fv_temp = zeros(1,rep);
    for ri = 1:rep   % test with repreats to find the max MLE
        [x_MLE, fval] = MLE_mGLM(Data(randperm(length(Data))));
        fv_temp(ri) = fval;
        x_temp(ri,:) = x_MLE;
    end
        
    % record MLE
    [minv,pos] = min(fv_temp);
    x_MLE = x_temp(pos,:);
    mle_mut_params(li, :) = x_MLE;
    trainLL(li) = minv;
end

%% CI
CIs = zeros(1,3*n_strains);
for li = 1:numel(fileList)
    
    %%% load Data structure
    fileName = fileList(li).name;
    filePath = fullfile(data_path, fileName);
    load(filePath);
    
    cii = 0;
    c_down = 0;
    ci1 = 0;  ci2 = 0;
    for di = 1:length(Data)
        dC = Data(di).dc(end) - Data(di).dc(1);
        c0 = Data(di).dc(1);
        if  dC > 0
            cii = cii + dC/(100-c0);
            ci1 = ci1 + 1;
%             cii = cii + 1;
        else
            c_down = c_down + dC/(c0-10);
            ci2 = ci2 + 1;
        end
    end
%     CIs(li) = cii/di;
    CIs(li) = (cii/ci1 + c_down/ci2);%/ (cii + abs(c_down));
end
CIs = reshape(CIs,[3,n_strains]);
figure;
imagesc(CIs)

%% Analysis
load('/projects/LEIFER/Kevin/Data_learn/Mutants/data_analysis/N2_params7.mat')  % 7,3
mut_idex = zeros(2,3,n_strains);  % id x condition x strain
N2_param = squeeze(mle_params(2,:,:));
% N2_param = squeeze(mean(mle_params(:,:,:),1));
N2_param = N2_param([1,3,2],:);
mut_param = reshape(mle_mut_params,[3,n_strains,n_params]);
xtickLabels = {'AIA','AIB-','AIY-','AIZ-','RIA-'};
ytickLabels = {'app','ave','nai'};
ii = 1;
for ss = 1:n_strains  % strain
    for cc = 1:3  % condition
        temp_param = squeeze(mut_param(cc,ss,:))';
        temp_n2_param = N2_param(cc,:);
        ii = ii+1;
        mut_idex(1,cc,ss) = -(BRW_id(temp_n2_param)*1 - BRW_id(temp_param));% / BRW_id(temp_n2_param);  % BRW index comparison
        mut_idex(2,cc,ss) = (temp_n2_param(8)*1 - temp_param(8));% / temp_n2_param(8);  % WV index comparison
    end
end

figure;
subplot(131); imagesc(CIs); colorbar(); title('CI'); xticklabels(xtickLabels); yticklabels(ytickLabels); xticks([1:n_strains]); yticks([1:3]);%colormap(jet(256))
subplot(132); imagesc(squeeze(mut_idex(1,:,:))); colorbar(); title('BRW'); xticklabels(xtickLabels); yticklabels(ytickLabels); xticks([1:n_strains]);yticks([1:3]);%colormap(jet(256))
subplot(133); imagesc(squeeze(mut_idex(2,:,:))); colorbar(); title('WV'); xticklabels(xtickLabels); yticklabels(ytickLabels); xticks([1:n_strains]);yticks([1:3]);%colormap(jet(256))

%% using convolved signal to estimate contribution!
mut_idex2 = zeros(2,3,n_strains);  % id x condition x strain
mut_sig = zeros(2,3,n_strains);  % for variance significance test
N2_param = squeeze(mle_params(2,:,:));
% N2_param = squeeze(median(mle_params(:,:,:),1));
N2_param = N2_param([1,3,2],:);
mut_param = reshape(mle_mut_params,[3,n_strains,n_params]);
xtickLabels = {'AIA','AIB-','AIY-','AIZ-','RIA-'};
ytickLabels = {'app','ave','nai'};
ii = 1;
for ss = 1:n_strains  % strain
    for cc = 1:3  % condition
        fileName = fileList(ii).name;
        filePath = fullfile(data_path, fileName);
        load(filePath);
%         load(data_mut{cc,ss});
        Data_n2_i = load(data_n2{cc});
        temp_param = squeeze(mut_param(cc,ss,:))';
        temp_n2_param = N2_param(cc,:);
        ii = ii+1;
        mut_idex2(1,cc,ss) = BRW_Kc_conv(temp_param, Data) - BRW_Kc_conv(temp_n2_param, Data_n2_i.Data);  % BRW index comparison
        mut_idex2(2,cc,ss) = WV_Kcp_conv(temp_param, Data) - WV_Kcp_conv(temp_n2_param, Data_n2_i.Data);% / temp_n2_param(8);  % WV index comparison
        
        [h_brw, h_wv] = significant_test(temp_param, Data, temp_n2_param, Data_n2_i.Data);
        mut_sig(1,cc,ss) = h_brw;
        mut_sig(2,cc,ss) = h_wv;
    end
end

figure;
subplot(131); imagesc(CIs); colorbar(); title('CI'); xticklabels(xtickLabels); yticklabels(ytickLabels); xticks([1:n_strains]); yticks([1:3]);%colormap(jet(256))
subplot(132); imagesc(squeeze(mut_idex2(1,:,:))); colorbar(); title('BRW'); xticklabels(xtickLabels); yticklabels(ytickLabels); xticks([1:n_strains]);yticks([1:3]);%colormap(jet(256))
subplot(133); imagesc(squeeze(mut_idex2(2,:,:))); colorbar(); title('WV'); xticklabels(xtickLabels); yticklabels(ytickLabels); xticks([1:n_strains]);yticks([1:3]);%colormap(jet(256))

figure;
subplot(121); imagesc(squeeze(mut_sig(1,:,:))); colorbar(); title('BRW'); xticklabels(xtickLabels); yticklabels(ytickLabels); xticks([1:n_strains]);yticks([1:3]);%colormap(jet(256))
subplot(122); imagesc(squeeze(mut_sig(2,:,:))); colorbar(); title('WV'); xticklabels(xtickLabels); yticklabels(ytickLabels); xticks([1:n_strains]);yticks([1:3]);%colormap(jet(256))

%% samp of samp
% for realiability, resample the subsample more times!
n_resamp = 50;
mut_sig_resamp = ones(2,3,n_strains);
for rr = 1:n_resamp
    ii = 1;
    for ss = 1:n_strains
        for cc = 1:3
            fileName = fileList(ii).name;
            filePath = fullfile(data_path, fileName);
            load(filePath);
    %         load(data_mut{cc,ss});
            Data_n2_i = load(data_n2{cc});
            temp_param = squeeze(mut_param(cc,ss,:))';
            temp_n2_param = N2_param(cc,:);
            ii = ii+1;

            [h_brw, h_wv] = significant_test(temp_param, Data, temp_n2_param, Data_n2_i.Data);
            mut_sig_resamp(1,cc,ss) = h_brw.*mut_sig_resamp(1,cc,ss);
            mut_sig_resamp(2,cc,ss) = h_wv.*mut_sig_resamp(2,cc,ss);
        end
    end
end

figure;
subplot(121); imagesc(squeeze(mut_sig_resamp(1,:,:))); colorbar(); title('BRW'); xticklabels(xtickLabels); yticklabels(ytickLabels); xticks([1:n_strains]);yticks([1:3]);%colormap(jet(256))
subplot(122); imagesc(squeeze(mut_sig_resamp(2,:,:))); colorbar(); title('WV'); xticklabels(xtickLabels); yticklabels(ytickLabels); xticks([1:n_strains]);yticks([1:3]);%colormap(jet(256))

%% tests
% [~, samp1] = BRW_Kc_conv(temp_param, Data);
% [~, samp2] = BRW_Kc_conv(temp_n2_param, Data_n2_i.Data);
% 
% figure;
% hist(samp1,100); hold on; hist(samp2,100);

%% make strain x condition mutant filenames
data_mut = cell(3,5);
for ii = 1:15
    fileName = fileList(ii).name;
    data_mut{ii} = fullfile(data_path, fileName);
end

%%
[index, dist] = BRW_Kc_conv(temp_n2_param, Data_n2_i.Data);

%% arrow plots
figure
N2_param = squeeze(mle_params(2,:,:));
% N2_param = squeeze(median(mle_params(:,:,:),1));
N2_param = N2_param([1,3,2],:);
% N2_ci = [0.42, 0.02, 0.21];
n2_ci_std = load('/projects/LEIFER/Kevin/Data_learn/Mutants/data_analysis/N2_CI_std.mat');
N2_ci = [n2_ci_std.m_ap(1),    n2_ci_std.m_av(1)   n2_ci_std.m_na(1)];
arrowHeadSize = 2;
ii = 9;
jj = 1;
test = zeros(3,5);
for cc = 1:3
    for ss = 1:5
%         fileName = fileList(jj).name;
%         filePath = fullfile(data_path, fileName);
%         load(filePath);
        load(data_mut{cc,ss});
        Data_n2_i = load(data_n2{cc});
        
        %%% plot arrow
        temp_param = squeeze(mut_param(cc,ss,:))';
        temp_n2_param = N2_param(cc,:);
        temp_n2_ci = N2_ci(cc);
        
        %%% norm
%         d_brw = (BRW_id(temp_param) - BRW_id(temp_n2_param));  % BRW index comparison
%         d_wv =  WV_id(temp_param) -  WV_id(temp_n2_param);  % WV index comparison
        
        %%% convolution
%         d_brw = mut_idex2(1,cc,ss);
%         d_wv = mut_idex2(2,cc,ss);
        d_brw = BRW_Kc_conv(temp_param, Data) - BRW_Kc_conv(temp_n2_param, Data_n2_i.Data); 
        d_wv =  WV_Kcp_conv(temp_param, Data) - WV_Kcp_conv(temp_n2_param, Data_n2_i.Data); 
        d_ci = CIs(cc,ss) - temp_n2_ci;
        test(cc,ss) = d_brw;
        
        %%% N2 measurements
%         brw_n2 = BRW_id(temp_n2_param);
%         wv_n2 = WV_id(temp_n2_param);
        Data_n2_i = load(data_n2{cc});
        brw_n2 = BRW_Kc_conv(temp_n2_param, Data_n2_i.Data);
        wv_n2 = WV_Kcp_conv(temp_n2_param, Data_n2_i.Data);
        
        subplot(131)
        plot(N2_ci(cc), ii,'o'); hold on
        h0 = quiver(temp_n2_ci, ii, d_ci, 0,0,  'autoScale', 'off'); hold on
        set(gcf,'color','w'); set(gca,'Fontsize',20); title('CI'); yticks([])
        subplot(132)
        semilogx(brw_n2, ii,'o'); hold on
%         plot(brw_n2, ii,'o'); hold on
        h1 = quiver(brw_n2, ii, (d_brw), 0,0,  'autoScale', 'off'); hold on
        set(gcf,'color','w'); set(gca,'Fontsize',20); title('BRW'); yticks([])
%         semilogx(BRW_Kc_conv(temp_param, Data) , ii, '*')
%         h1.MaxHeadSize = 10000000;
%         set(h, 'UData', arrowLength * d_brw, 'VData', arrowLength * 0);
%         h.AutoScaleFactor = arrow_size*d_brw;
%         h.MaxHeadSize  = 5;
        subplot(133)
%         plot(-temp_n2_param(8), ii,'o'); hold on
        plot(wv_n2, ii,'o'); hold on
        h2 = quiver(wv_n2, ii, d_wv, 0,0,  'autoScale', 'off'); hold on
        set(gcf,'color','w'); set(gca,'Fontsize',20); title('WV'); yticks([])
%         semilogx(WV_Kcp_conv(temp_param, Data) , ii, '*')
%         h2.MaxHeadSize = arrowHeadSize/abs(d_wv);
%         set(h, 'UData', arrowLength * d_wv, 'VData', arrowLength * 0);
%         h.AutoScaleFactor = arrow_size*d_wv;
%         h.MaxHeadSize  = 0.5;
        ii = ii-1;
        
    end    
end

%% test parameter cluster
% Sample data (replace this with your actual data)
data = [mle_mut_params(:,:)];% reshape(CIs,12,1)]; %randn(100, 3);  % 100 observations with 3 features each

[coeff, score, ~, ~, explained] = pca(data);
firstTwoPCs = coeff(:, 1:2);
projectedData = data * firstTwoPCs;

figure
for ii = 1:12
    plot(projectedData(ii, 1), projectedData(ii, 2),'o'); hold on
end
% scatter(projectedData(:, 1), projectedData(:, 2));
xlabel('PC 1');
ylabel('PC 2');
title('Data Projected onto First Two Principal Components');
disp(['Variance explained by PC1: ', num2str(explained(1)), '%']);
disp(['Variance explained by PC2: ', num2str(explained(2)), '%']);

%% linear contribution analysis
P = ones(n_strains, n_strains);  % neuron x neuron perturbation matrix
P(1:size(P,1)+1:end) = 0;
B = zeros(2, n_strains);  % behavior x neuron
Ws = zeros(3,2, n_strains);  % condition x behavior x neuron
xtickLabels = {'AIA','AIB','AIY','AIZ','RIA'};
ytickLabels = {'BRW','WV'};
ttls = {'appetitive', 'aversive', 'naive'};

%%% color scheme
numColors = 256;  % Number of colors in the colormap
r = [linspace(1, 1, numColors), linspace(1, 0.5, numColors)];  % Red component
g = [linspace(0, 1, numColors), linspace(0.5, 1, numColors)];  % Green component
b = [linspace(0, 1, numColors), linspace(1, 1, numColors)];  % Blue component
customMap = [r', g', b'];

figure
for cc = 1:3
    for ss = 1:5
        %%% kernel norm measurement
%         temp_param = squeeze(mut_param(cc,ss,:))';
%         B(1,ss) = BRW_id(temp_param);
%         B(2,ss) =  WV_id(temp_param);
        
        %%% normalized index
        load(data_mut{cc,ss});
        temp_param = squeeze(mut_param(cc,ss,:))';
        B(1,ss) = BRW_Kc_conv(temp_param, Data);
        B(2,ss) = WV_Kcp_conv(temp_param, Data);
    end
    B = B./vecnorm(B,1,2);  % normalize behavior readout?
    wtemp = B/P;%B*inv(P);
    Ws(cc,:,:) = wtemp;
    
    subplot(1,3,cc)
    imagesc(wtemp); xticklabels(xtickLabels); yticklabels(ytickLabels); xticks([1:n_strains]); yticks([1:2]); title(ttls(cc)); caxis([-0.3,.3])
    set(gcf,'color','w'); set(gca,'Fontsize',20);
%     caxis([-max(abs(wtemp(:))), max(abs(wtemp(:)))]);
end

%%
cc = 2;
beh_dist = zeros(5,5);
for ii = 1:5
    for jj = 1:5
        ivec = squeeze(mut_param(cc,ii,:))';
        jvec = squeeze(mut_param(cc,jj,:))';
%         beh_dist(ii,jj) = sum((B(:,ii)-B(:,jj)).^2);
        beh_dist(ii,jj) = sum((ivec - jvec).^2) / (norm(ivec));%*norm(jvec));
%         correlation_matrix = corrcoef(ivec, jvec);
%         beh_dist(ii,jj) = correlation_matrix(1, 2);
    end
end

%%
% save('/projects/LEIFER/Kevin/Data_learn/Mutants/data_analysis/mle_mut_params7.mat','mle_mut_params')
% save('/projects/LEIFER/Kevin/Analysis/WBI_Flavell/w_neuralPal/beh_dist.mat','beh_dist','B','wtemp','Ws');

%% mutant plots
target_exp = [4,7,10,13];
figure
for kk = 1:4
    subplot(2,2,kk);
fileName = fileList(target_exp(kk)).name;  %4,7,10,13
filePath = fullfile(data_path, fileName)
load(filePath)
% figure; 
imagesc(M); hold on
track_len = []; for ii = 1:length(Data); track_len = [track_len, length(Data(ii).dc)]; end
[sortedVector, sortedIndices] = sort(track_len);
picktop = 20;
track_id = sortedIndices(end-picktop:end);
for ii = 1:length(track_id)
    plot(Data(track_id(ii)).xy(1,:), Data(track_id(ii)).xy(2,:), 'k')
    plot(Data(track_id(ii)).xy(1,1), Data(track_id(ii)).xy(2,1), 'g.', 'MarkerSize',15)
    plot(Data(track_id(ii)).xy(1,end), Data(track_id(ii)).xy(2,end), 'r.', 'MarkerSize',15)
end
end

%% functions
function [x_MLE, fval] = MLE_mGLM(Data_train)
    [xx_train, yy_train, mask_train] = data2xy(Data_train);
    nB = 4;
    [cosBasis, tgrid, basisPeaks] = makeRaisedCosBasis(nB, [0, 8], 1.3);
    ang_fit = yy_train;
    dcp_fit = xx_train(2,:);
    ddc_fit = xx_train(1,:);
    trials_fit = mask_train;
    lfun = @(x)nLL_kernel_hist5(x, ang_fit, dcp_fit, ddc_fit, cosBasis, .1, trials_fit);
%     lfun = @(x)nLL_kernel_hist2(x, ang_fit, dcp_fit, ddc_fit, cosBasis, 1, trials_fit);
    opts = optimset('display','iter');
%     LB = [1e-0, 1e-5, ones(1,nB)*-inf, 0.0 -inf, 1e-0, -inf, 1e-1, 1e-0*10, 0.1];
%     UB = [200, 1., ones(1,nB)*inf, 0.1, inf, 50, inf, 100, 50, 1];
%     prs0 = [50, 0.1, randn(1,nB)*10, 0.01, -1, 25, 1, 25, 5, 1.];
    LB = [1e-0, 1e-5, ones(1,nB)*-inf, 0.0 -inf, 1e-0, -inf, 1e-1, 1  -inf, -inf];
    UB = [200, 1., ones(1,nB)*inf, 0.1, inf, 50, inf, 100, 100  inf, inf];
    prs0 = [50, 0.2, randn(1,nB)*10, 0.01, -1, 2, 1, 25, 10 -10, -1];
    prs0 = prs0 + prs0.*randn(1,length(UB))*0.01;
    [x,fval,EXITFLAG,OUTPUT,LAMBDA,GRAD,HESSIAN] = fmincon(lfun,prs0,[],[],[],[],LB,UB,[],opts);
    x_MLE = x;
end

function [wv] = WV_id(x);
    [cosBasis, tgrid, basisPeaks] = makeRaisedCosBasis(4, [0, 8], 1.3);
    tt = 0:length(cosBasis)-1;
    vec = x(8)*exp(-tt/x(9));
    wv = abs(x(8));% norm(vec) *1; %
end

function [brw] = BRW_id(x)
    [cosBasis, tgrid, basisPeaks] = makeRaisedCosBasis(4, [0, 8], 1.3);
    delta = x(2) - x(7);
    beta = norm(x(3:6)*cosBasis');
    brw = (1)*beta*1;
end

function [varargout] = BRW_Kc_conv(x, Data);
    [cosBasis, tgrid, basisPeaks] = makeRaisedCosBasis(4, [0, 8], 1.3);
    tt = 0:length(cosBasis)-1;
    Kc = x(3:6)*cosBasis';
    [xx_train, yy_train, mask_train] = data2xy(Data);%(Data(1:400));%(Data(idvec(1:400)));
    ddc_fit = xx_train(1,:);
    trials_fit = ones(1,length(mask_train));
    trials_fit(find(mask_train==0)) = NaN;
%     brw = nanstd(conv_kernel(ddc_fit.*trials_fit, Kc));
    K_h_rec = x(10)*exp(-tt/x(11));
    filt_dth = conv_kernel(abs(yy_train), K_h_rec);
    filt_dc = conv_kernel(ddc_fit.*trials_fit, Kc/1);
    dc_dth = filt_dc+filt_dth*1;
    compute_nl = (x(2)-x(7))./(1+exp(-dc_dth - 0*(filt_dth))) + x(7);
    test_nl = (x(2)-x(7))./(1+exp(-ddc_fit - 0*(filt_dth))) + x(7);
    if nargout > 1
%         varargout{1} = 1/nanstd((ddc_fit.*trials_fit)) * nanstd(conv_kernel(ddc_fit.*trials_fit, Kc));
        varargout{1} = norm(Kc)/nanstd(ddc_fit.*1);%norm(Kc);   %(nanstd(compute_nl));% - nanstd(filt_dc);
        temp = (conv_kernel(ddc_fit.*trials_fit, Kc));
%         varargout{2} = temp(~isnan(temp));
        varargout{2} = dc_dth;
    else
%         varargout{1} = 1/nanstd((ddc_fit.*trials_fit)) * nanstd(conv_kernel(ddc_fit.*trials_fit, Kc));
        varargout{1} = norm(Kc)/nanstd(ddc_fit.*1);%norm(Kc);   %(nanstd(compute_nl));% - nanstd(filt_dc);
        
        %%% test with Iino method %%%
        max_point = quantile(dc_dth, 0.60);  %nanmean(dc_dth) + nanstd(dc_dth);
        min_point = quantile(dc_dth, 0.40);  %nanmean(dc_dth) - nanstd(dc_dth);
%         pir_index = (x(2)-x(7))./(1+exp(-max_point)) + x(7)  - ( (x(2)-x(7))./(1+exp(-min_point)) + x(7) );
        M = x(2);  m = x(7); mid = (M+m)/2; rang = (M-m)/2;
        max_point = log(((mid+rang*0.25) - m)/(M - (mid+rang*0.25)));
        min_point = log(((mid-rang*0.25) - m)/(M - (mid-rang*0.25)));
        pir_index = length(find(dc_dth<max_point | dc_dth>min_point))/length(dc_dth);
        pir_index = length(find(abs(dc_dth)<3))/length(dc_dth);  % * (x(2)-x(7))*5/14;% *norm(Kc);
%         pir_index = norm(Kc)/ nanstd(filt_dth.*1); % iqr(dc_dth);  %mad(dc_dth);
        pir_index = norm(Kc)/nanstd(ddc_fit.*1) * length(find(dc_dth>0))/length(dc_dth);
        varargout{1} = pir_index; %norm(Kc)/nanstd(ddc_fit.*1);%
        %%%
    end
end

function [varargout] = WV_Kcp_conv(x, Data)
    [cosBasis, tgrid, basisPeaks] = makeRaisedCosBasis(4, [0, 8], 1.3);
    tt = 0:length(cosBasis)-1;
    Kcp = x(8)*exp(-tt/x(9));
    [xx_train, yy_train, mask_train] = data2xy(Data);%(Data(1:400));%(Data(idvec(1:400)));
    dcp_fit = xx_train(2,:);
    trials_fit = ones(1,length(mask_train));
    trials_fit(find(mask_train==0)) = NaN;
%     wv = nanstd(conv_kernel(dcp_fit.*trials_fit, Kcp));
    if nargout > 1
        varargout{1} = nanstd(conv_kernel(dcp_fit.*trials_fit, Kcp));
        temp = (conv_kernel(dcp_fit.*trials_fit, Kcp));
        varargout{2} = temp(~isnan(temp));
    else
        varargout{1} = nanstd(conv_kernel(dcp_fit.*trials_fit, Kcp));
    end
end

function [h_brw, h_wv] = significant_test(x1, Data1, x2, Data2);
    
%%%%%% test with sampling
    alpha = 0.001; % Significance level
    samps = 15;  % sample the variance, rather than using vartest (?)
    numsamps = 5;
    %%% sampling
    originalVector1 = 1:length(Data1);
    originalVector2 = 1:length(Data2);
    samp_brw = zeros(2,samps);
    samp_wv = zeros(2,samps);
    for ii = 1:samps
        subsampID1 = randsample(numel(originalVector1), numsamps);
        subsampID2 = randsample(numel(originalVector2), numsamps);
        [samp1_brw] = BRW_Kc_conv(x1, Data1(subsampID1));
        [samp2_brw] = BRW_Kc_conv(x2, Data2(subsampID2));
        samp_brw(:,ii) = [samp1_brw; samp2_brw];
        [samp1_wv] = WV_Kcp_conv(x1, Data1(subsampID1));
        [samp2_wv] = WV_Kcp_conv(x2, Data2(subsampID2));
        samp_wv(:,ii) = [samp1_wv; samp2_wv];
    end
    [h_brw, p] = ttest2(samp_brw(1,:), samp_brw(2,:), alpha);
    [h_wv, p] = ttest2(samp_wv(1,:), samp_wv(2,:), alpha);
%%%%%% direct method
%     alpha = 0.001; % Significance level
%     %%% for BRW
%     [~,samp1_brw] = BRW_Kc_conv(x1, Data1);
%     [~,samp2_brw] = BRW_Kc_conv(x2, Data2);
%     [h_brw, p] = vartest2(samp1_brw(1:end), samp2_brw(1:end), alpha, 'Both');
% %     [h_brw, p] = vartest(samp1_brw, var(samp2_brw));
%     %%% for WV
%     [~,samp1_wv] = WV_Kcp_conv(x1, Data1);
%     [~,samp2_wv] = WV_Kcp_conv(x2, Data2);
%     [h_wv, p] = vartest2(samp1_wv(1:1000), samp2_wv(1:1000), alpha, 'Both');
% %     [h_wv, p] = vartest(samp1_wv, var(samp2_wv));
end
